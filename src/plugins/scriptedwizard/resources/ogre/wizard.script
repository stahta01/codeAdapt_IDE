////////////////////////////////////////////////////////////////////////////////
//
// Ogre3D project wizard
//
// TODO: make it work with both available SDKs: MinGW & MSVS
//
////////////////////////////////////////////////////////////////////////////////

// globals
OgrePath <- wxT_2("");
// we have two possible types of OGRE SDK installation:
// 1) Source distribution
//    : identical configuration for both linux and windows (except link libs)
// 2) Pre-made SDK
//    : in windows, small changes
//    : in linux we use pkg-config for setting up everything
// This var is true for 1, false for 2.
OgreIsSource <- false;

function BeginWizard()
{
    // intro text
    local intro_msg = wxT_2("Welcome to the new OGRE project wizard!\n\n" +
                        "This wizard will guide you to create a new project\n" +
                        "using the OGRE 3D rendering engine.\n\n" +
                        "When you 're ready to proceed, please click \"Next\"...");

    // "select OGRE path" text
    local ogrepath_descr = wxT_2("Please select the location of OGRE on your computer.\n" +
                              "This is the top-level folder where OGRE was installed\n(unpacked).\n" +
                              "To help you, this folder must contain the subfolders\n" +
                              "\"include\" and \"lib\".\n" +
                              "If you have setup an environment variable named\n" +
                              "OGRE_HOME, it 'll automatically be used below.");

    // source or SDK?
    local sdk_descr = wxT_2("OGRE might exist on your system as a source package\n" +
                        "(you built it yourself), or as a pre-made SDK which you installed.\n\n" +
                        "It is important for this wizard to know which SDK type is\n" +
                        "installed so that it can setup your project properly.");

    // choices
    local sdk_choices =  wxT_2("I have a folder with the OGRE source code;" +
                            "I have installed a pre-made OGRE SDK");

    // compilers: GCC and MSVC for windows, GCC for linux
    local compilers = PLATFORM == PLATFORM_MSW
                        ? wxT_2("gcc*;msv*")
                        : wxT_2("gcc*");

    Wizard.AddInfoPage(wxT_2("OgreIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddGenericSingleChoiceListPage(wxT_2("OgreSDKType"), sdk_descr, sdk_choices, OgreIsSource ? 0 : 1);
    Wizard.AddGenericSelectPathPage(wxT_2("OgrePath"), ogrepath_descr, wxT_2("Please select OGRE's location:"), wxT_2("$(OGRE_HOME)"));
    Wizard.AddCompilerPage(wxT_2(""), compilers, true, true);
}

////////////////////////////////////////////////////////////////////////////////
// OGRE SDK's type
////////////////////////////////////////////////////////////////////////////////

function OnGetNextPage_OgreSDKType()
{
    // for pre-made SDK under linux, skip OGRE path selection
    // we will use pkg-config for this ;)
    OgreIsSource = Wizard.GetListboxSelection(wxT_2("lstSelections")) == 0;
    if (PLATFORM != PLATFORM_MSW && !OgreIsSource)
        return wxT_2("CompilerPage");

    return wxT_2("OgrePath");
}

////////////////////////////////////////////////////////////////////////////////
// OGRE's compiler
////////////////////////////////////////////////////////////////////////////////

function OnGetPrevPage_CompilerPage()
{
    // for pre-made SDK under linux, skip OGRE path selection
    // we will use pkg-config for this ;)
    if (PLATFORM != PLATFORM_MSW && !OgreIsSource)
        return wxT_2("OgreSDKType");

    return wxT_2("OgrePath");
}

////////////////////////////////////////////////////////////////////////////////
// OGRE's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_OgrePath(fwd)
{
    if (fwd)
    {
        local dir         = Wizard.GetTextControlValue(wxT_2("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        local dir_nomacro = ReplaceMacros(dir, true);
        if ((OgreIsSource && !IO.FileExists(dir_nomacro + wxT_2("/OgreMain/include/Ogre.h"))) ||
            (!OgreIsSource && !IO.FileExists(dir_nomacro + wxT_2("/include/Ogre.h"))))
        {
            ShowError(wxT_2("The path you entered seems valid, but this wizard " +
                    "can't locate OGRE's files in it..."));
            return false;
        }

        OgrePath = dir;
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    return wxT_2("ogre/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options

    // Windows platform
    if (PLATFORM == PLATFORM_MSW)
    {
        if (!OgreIsSource) // SDK
        {
//            project.AddIncludeDir(OgrePath + wxT_2("/stlport/stlport"));
            project.AddIncludeDir(OgrePath + wxT_2("/include"));
            project.AddIncludeDir(OgrePath + wxT_2("/samples/include"));
            project.AddIncludeDir(OgrePath + wxT_2("/samples/refapp/include"));
            project.AddLibDir(OgrePath + wxT_2("/lib"));
//            project.AddCompilerOption(wxT_2("-D_STLP_NO_CUSTOM_IO"));
//            project.AddCompilerOption(wxT_2("-D_STLP_USE_DYNAMIC_LIB"));
        }

        project.AddCompilerOption(wxT_2("-mthreads"));
        project.AddCompilerOption(wxT_2("-fmessage-length=0"));
        project.AddCompilerOption(wxT_2("-fexceptions"));
        project.AddCompilerOption(wxT_2("-fident"));
        project.AddCompilerOption(wxT_2("-DWIN32"));
        project.AddCompilerOption(wxT_2("-D_WINDOWS"));
//        project.AddLinkLib(wxT_2("opengl32"));
//        project.AddLinkLib(wxT_2("gdi32"));
//        project.AddLinkLib(wxT_2("user32"));
//        project.AddLinkLib(wxT_2("kernel32"));

        // help the linker
        project.AddLinkerOption(wxT_2("-Wl,--enable-runtime-pseudo-reloc"));
        project.AddLinkerOption(wxT_2("-Wl,--enable-auto-image-base"));
        project.AddLinkerOption(wxT_2("-Wl,--add-stdcall-alias"));
        project.AddLinkerOption(wxT_2("-mthreads"));
    }
    else
    {
        if (!OgreIsSource) // SDK
        {
            project.AddCompilerOption(wxT_2("`pkg-config --cflags OGRE`"));
            project.AddLinkerOption(wxT_2("`pkg-config --libs OGRE`"));
        }
        project.AddLinkLib(wxT_2("GL"));
    }

    if (OgreIsSource) // source: common for windows and linux
    {
        project.AddIncludeDir(OgrePath + wxT_2("/OgreMain/include"));
        project.AddIncludeDir(OgrePath + wxT_2("/Samples/Common/include"));
        // lib dirs are different based on Debug/Release targets
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());
    // enable C++ exceptions (project-wide)
    CppExceptionsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging

        if (OgreIsSource)
            target.SetWorkingDir(OgrePath + wxT_2("/Samples/Common/bin/Debug"));
        else if (PLATFORM == PLATFORM_MSW)
            target.SetWorkingDir(OgrePath + wxT_2("/bin/Debug"));
        project.AddLibDir(OgrePath + wxT_2("/bin/Debug"));
        // TODO: linux package contains samples?

        if (target.GetWorkingDir().Matches(wxT_2("")))
            target.SetOutputFilename(target.SuggestOutputFilename());
        else
            target.SetOutputFilename(target.GetWorkingDir() + wxFILE_SEP_PATH + target.SuggestOutputFilename());
//        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);

        if (PLATFORM == PLATFORM_MSW)
        {
            target.AddLinkLib(wxT_2("OgreMain_d"));
            target.AddLinkLib(wxT_2("OIS_d"));

            target.AddCompilerOption(wxT_2("-D_DEBUG"));
//            // windows SDK uses STLport
//            if (!OgreIsSource)
//            {
//                target.AddCompilerOption(wxT_2("-D_STLP_DEBUG"));
//                target.AddLinkLib(wxT_2("stlportstlg.5.0"));
//            }
        }
        else
        {
            target.AddLinkLib(wxT_2("OgreMain"));
            target.AddLinkLib(wxT_2("OIS"));
        }

        if (OgreIsSource)
            target.AddLibDir(OgrePath + wxT_2("/OgreMain/lib/Debug"));

        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }
    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console

        if (OgreIsSource)
            target.SetWorkingDir(OgrePath + wxT_2("/Samples/Common/bin/Release"));
        else if (PLATFORM == PLATFORM_MSW)
            target.SetWorkingDir(OgrePath + wxT_2("/bin/Release"));
        project.AddLibDir(OgrePath + wxT_2("/bin/Release"));
        // TODO: linux package contains samples?

        if (target.GetWorkingDir().Matches(wxT_2("")))
            target.SetOutputFilename(target.SuggestOutputFilename());
        else
            target.SetOutputFilename(target.GetWorkingDir() + wxFILE_SEP_PATH + target.SuggestOutputFilename());
//        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);

        target.AddLinkLib(wxT_2("OgreMain"));
        target.AddLinkLib(wxT_2("OIS"));
        if (PLATFORM == PLATFORM_MSW)
        {
            target.AddCompilerOption(wxT_2("-DNDEBUG"));
//            // windows SDK uses STLport
//            if (!OgreIsSource)
//                target.AddLinkLib(wxT_2("stlport.5.0"));
        }
        if (OgreIsSource)
            target.AddLibDir(OgrePath + wxT_2("/OgreMain/lib/Release"));

        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
