////////////////////////////////////////////////////////////////////////////////
//
// FLTK project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals (windows only)
FltkPathDefault    <- wxT_2("$(#fl)");
FltkPathDefaultInc <- wxT_2("$(#fl.include)");
FltkPathDefaultLib <- wxT_2("$(#fl.lib)");
FltkPath <- wxT_2("");

FLTKQuickProject <- true;

function BeginWizard()
{
    local intro_msg = wxT_2("Welcome to the new FLTK project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the FLTK GUI C++ library.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");

    local fltkpath_descr = wxT_2("Please select the location of FLTK on your computer.\n" +
                              "This is the top-level folder where FLTK was installed (unpacked).\n" +
                              "To help you, this folder must contain the subfolders\n" +
                              "\"include\" and \"lib\".");

    // "select fltk project to generate" text
    local fltkprjtype_descr = wxT_2("Please select the type of project to generate.");
    local fltkprj_choices = wxT_2("Simple main() example;FLUID-based project");

    Wizard.AddInfoPage(wxT_2("FltkIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    if (PLATFORM == PLATFORM_MSW)
        Wizard.AddGenericSelectPathPage(wxT_2("FltkPath"), fltkpath_descr, wxT_2("Please select FLTK's location:"), FltkPathDefault);
    Wizard.AddGenericSingleChoiceListPage(wxT_2("FLTKPrjType"), fltkprjtype_descr, fltkprj_choices, 0);
    Wizard.AddCompilerPage(wxT_2(""), wxT_2("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// FLTK's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_FltkPath(fwd)
{
    if (fwd)
    {
        local dir         = Wizard.GetTextControlValue(wxT_2("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        local dir_nomacro = VerifyDirectory(dir);

        if (dir_nomacro.IsEmpty())
            return false;

        // verify include dependencies
        local dir_nomacro_inc = GetCompilerIncludeDir(dir, FltkPathDefault, FltkPathDefaultInc);
        if (dir_nomacro_inc.IsEmpty())
            return false;
        if (!VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + wxT_2("FL"), wxT_2("Fl.h"), wxT_2("FLTK's include"))) return false;

        // verify library dependencies
        local dir_nomacro_lib = GetCompilerLibDir(dir, FltkPathDefault, FltkPathDefaultLib);
        if (dir_nomacro_lib.IsEmpty())
            return false;
        if (!VerifyLibFile(dir_nomacro_lib, wxT_2("fltk"), wxT_2("FLTK's"))) return false;


        FltkPath = dir; // Remember the original selection.

        local is_macro = wxT_2("");

        // try to resolve the include directory as macro
        is_macro = GetCompilerIncludeMacro(dir, FltkPathDefault, FltkPathDefaultInc);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real inc path we had computed instead
            FltkPathDefaultInc = dir_nomacro_inc;
        }

        // try to resolve the library directory as macro
        is_macro = GetCompilerLibMacro(dir, FltkPathDefault, FltkPathDefaultLib);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real lib path we had computed instead
            FltkPathDefaultLib = dir_nomacro_lib;
        }
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// Project type to create
////////////////////////////////////////////////////////////////////////////////

function OnLeave_FLTKPrjType(fwd)
{
    if (fwd)
    {
        FLTKQuickProject = Wizard.GetListboxSelection(wxT_2("GenericChoiceList")) == 0;
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    if (FLTKQuickProject)
        return wxT_2("fltk/files");
    return wxT_2("fltk/fluid");
}

// setup the already created project
function SetupProject(project)
{
    if (PLATFORM == PLATFORM_MSW)
    {
        // set project options
        project.AddIncludeDir(FltkPathDefaultInc);
        project.AddLibDir(FltkPathDefaultLib);

        // add link libraries
        project.AddLinkLib(wxT_2("fltk"));
        project.AddLinkLib(wxT_2("ole32"));
        project.AddLinkLib(wxT_2("uuid"));
        project.AddLinkLib(wxT_2("comctl32"));
        project.AddLinkLib(wxT_2("wsock32"));
        project.AddLinkLib(wxT_2("m"));
        project.AddLinkLib(wxT_2("gdi32"));
        project.AddLinkLib(wxT_2("user32"));
        project.AddLinkLib(wxT_2("kernel32"));

        project.AddCompilerOption(wxT_2("-DWIN32"))
        project.AddCompilerOption(wxT_2("-mms-bitfields"))
    }
    else // PLATFORM != PLATFORM_MSW
    {
        // fltk-config based: things are ultra-simple :)
        project.AddCompilerOption(wxT_2("`fltk-config --cxxflags`"));
        project.AddLinkerOption(wxT_2("`fltk-config --ldstaticflags`"));
    }

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID().Matches(wxT_2("gcc")))
        {
            // enable generation of debugging symbols for target
            // Note: DebugSymbolsOn() won't work because -Wall produces far too many warnings
            target.AddCompilerOption(wxT_2("-g"));
        }
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID().Matches(wxT_2("gcc")))
        {
            // enable optimizations for target.
            // Note: OptimizationsOn() won't work because of -I-!
            target.AddCompilerOption(wxT_2("-O2"));
            target.AddCompilerOption(wxT_2("-s"));
        }
    }

    return true;
}
