////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: DLL (Dynamic Link Library)
// Author:  Yiannis Mandravellos
// Modified by: Biplab Kumar Modak
//
////////////////////////////////////////////////////////////////////////////////


function BeginWizard()
{
    local wiz_type = Wizard.GetWizardType();

    if (wiz_type == wizProject)
    {
        local intro_msg = wxT_2("Welcome to the new DLL wizard!\n" +
                             "This wizard will guide you to create a new DLL.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"...");

        Wizard.AddInfoPage(wxT_2("DllIntro"), intro_msg);
        Wizard.AddProjectPathPage();
        Wizard.AddCompilerPage(wxT_2(""), wxT_2("*"), true, true);
    }
    else if (wiz_type == wizTarget)
    {
        local intro_msg = wxT_2("Welcome to the new DLL build target wizard!\n" +
                             "This wizard will guide you to create a new DLL build target.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"...");
        Wizard.AddInfoPage(wxT_2("DllIntro"), intro_msg);
        Wizard.AddBuildTargetPage(wxT_2(""), false, true, wxT_2(""), wxT_2("*"), true);
    }
    else
        print(wiz_type);
}

function GetFilesDir()
{
    local result = wxT_2("dll/files");
    return result;
}

function SetupProject(project)
{
    // Debug build target
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
        SetupTarget(target, true);

    // Release build target
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
        SetupTarget(target, false);

    return true;
}

function SetupTarget(target, is_debug)
{
    if (IsNull(target))
        return false;

    target.SetTargetType(ttDynamicLib);

    local WizType = Wizard.GetWizardType();
    local dll_file_name, dll_output_dir, dll_filename_with_path;
    if (WizType == wizProject)
    {
        if (is_debug)
            dll_output_dir = Wizard.GetDebugOutputDir();
        else
            dll_output_dir = Wizard.GetReleaseOutputDir();
    }
    else if (WizType == wizTarget)
        dll_output_dir = Wizard.GetTargetOutputDir();
    dll_file_name = target.SuggestOutputFilename();
    dll_filename_with_path = dll_output_dir + dll_file_name;

    target.SetOutputFilename(dll_filename_with_path);

    // enable compiler warnings (project-wide)
    WarningsOn(target, Wizard.GetCompilerID());

    // Now define BUILD_DLL to export the functions
    if (    GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("gcc"))
        ||  GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("dmc")))
    {
        target.AddCompilerOption(wxT_2("-DBUILD_DLL"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("bcc")))
    {
        target.AddCompilerOption(wxT_2("-DBUILD_DLL"));
        target.AddCompilerOption(wxT_2("-tWR")); // To use Dynamic RTL
        target.AddLinkerOption(wxT_2("-Gi")); // To create an import library
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc*")))
    {
        target.AddCompilerOption(wxT_2("/DBUILD_DLL"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("ow")))
    {
        target.AddCompilerOption(wxT_2("-dBUILD_DLL"));
        target.AddCompilerOption(wxT_2("-bt=nt"));
        target.AddLinkerOption(wxT_2("OPTION IMPLIB")); // To create an import library
    }

    // Add user32.lib for MessageBox()
    target.AddLinkLib(wxT_2("user32"));

    if (is_debug)
    {
        // enable debugging symbols for this target
        // DebugSymbolsOn(target, Wizard.GetTargetCompilerID()); // TODO: doesn't seem to work?
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }
    else
    {
        // enable optimizations for this target
        // OptimizationsOn(target, Wizard.GetTargetCompilerID()); // TODO: doesn't seem to work?
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc*")))
    {
        if (is_debug)
            target.AddCompilerOption(wxT_2("/MDd"));
        else
            target.AddCompilerOption(wxT_2("/MD"));
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc8"))
            || GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc10")))
        {
            /* Incremental linking shall be set to NO to embed manifest in the following way.
            * Visit http://msdn2.microsoft.com/en-us/library/ms235605(VS.80).aspx for more details.
            */
            target.AddLinkerOption(wxT_2("/INCREMENTAL:NO"));
            target.AddCommandsAfterBuild(wxT_2("mt.exe /nologo /manifest \"") + dll_filename_with_path + wxT_2(".manifest\" /outputresource:\"") + dll_filename_with_path + wxT_2("\";2"));
        }
    }

    return true;
}
