////////////////////////////////////////////////////////////////////////////////
//
// PSDK project wizard
//
////////////////////////////////////////////////////////////////////////////////

/*  Define few Global Variables     */

/** ProjectType: 0 - Frame, 1 - Dialog and 2 - MDI
*   Default: 0
*/
ProjectType <- 0;
PsdkPath <- wxT_2("$(#psdk)");

function BeginWizard()
{
    local intro_msg = wxT_2("Welcome to the new Win32 GUI project wizard!\n\n" +
                         "This wizard will guide you to create a new Win32 GUI project.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");
    local psdk_msg = wxT_2("Please define Platform SDK directory.\n\n" +
                        "Project will not compile without the necessary system\n" +
                        "libraries");

    Wizard.AddInfoPage(wxT_2("Win32Intro"), intro_msg);
    Wizard.AddGenericSingleChoiceListPage(wxT_2("Win32ProjType"),
            wxT_2("Please select type of project."),
            wxT_2("Frame based;Dialog based"),
            ProjectType); // select wxwidgets version
    Wizard.AddProjectPathPage();
    Wizard.AddCompilerPage(wxT_2(""), wxT_2("*"), true, true);
    Wizard.AddGenericSelectPathPage(wxT_2("PsdkPath"), psdk_msg, wxT_2("Platform SDK's location:"), wxT_2("$(#psdk)"));
}

////////////////////////////////////////////////////////////////////////////////
// Project Type page
////////////////////////////////////////////////////////////////////////////////

function OnEnter_Win32ProjType(fwd)
{
    if (fwd)
    {
        ProjectType = Wizard.GetListboxSelection(wxT_2("GenericChoiceList"));
    }
    return true;
}

function OnLeave_Win32ProjType(fwd)
{
    if (fwd)
    {
        ProjectType = Wizard.GetListboxSelection(wxT_2("GenericChoiceList"));
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// Determines the next page of compiler page
////////////////////////////////////////////////////////////////////////////////

function OnGetNextPage_CompilerPage()
{
    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc*")))
        return wxT_2("PsdkPath");
    else
        return wxT_2("");
}

// return the files this project contains
function GetFilesDir()
{
    local file_loc = wxT_2("");
    if (ProjectType == 0)
        return wxT_2("win32gui/files/frame");
    else if (ProjectType == 1)
        return wxT_2("win32gui/files/dialog");
}

// setup the already created project
function SetupProject(project)
{
    // add link libraries
    project.AddLinkLib(wxT_2("gdi32"));
    project.AddLinkLib(wxT_2("user32"));
    project.AddLinkLib(wxT_2("kernel32"));
    project.AddLinkLib(wxT_2("comctl32"));
    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("bcc")))
        project.AddLinkLib(wxT_2("cw32mti"));

    // set additional path's for MS VC++ Toolkit
    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("msvc*")))
    {
        // set project options for MS Visual C++ Toolkit
        project.AddIncludeDir(wxT_2("$(#psdk.include)"));
        project.AddLibDir(wxT_2("$(#psdk.lib)"));
    }

    // Additional code to support OpenWatcom
    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("ow")))
        project.AddCompilerOption(wxT_2("-bt=nt"));

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), wxT_2("gcc")))
            target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging, only for GCC
        else
            target.SetTargetType(ttExecutable);
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
